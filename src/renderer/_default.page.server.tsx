import createCache from '@emotion/cache'
import createEmotionServer from '@emotion/server/create-instance'
import { renderToString } from 'react-dom/server'
import { escapeInject, dangerouslySkipEscape } from 'vite-plugin-ssr'
import type { PageContextBuiltIn } from 'vite-plugin-ssr'

import makeStore from '@/store/makeStore'
import contentApi from '@/store/slices/contentApi'
import type { PageContext } from '@/types/page'
import PageShell from '@/ui/components/PageShell'

// Material UI font
import '@fontsource/roboto/300.css'
import '@fontsource/roboto/400.css'
import '@fontsource/roboto/500.css'
import '@fontsource/roboto/700.css'

function render(pageContext: ServerPageContext) {
  const { pageHtml, emotionStyleTags } = pageContext

  // console.log('emotionStyleTags')
  // console.log(emotionStyleTags)

  const { documentProps } = pageContext
  const title = (documentProps && documentProps.title) || 'Vite SSR app'
  const desc = (documentProps && documentProps.description) || 'App using Vite + vite-plugin-ssr'

  return escapeInject`<!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="description" content="${desc}" />
        <title>${title}</title>
        <meta name="emotion-insertion-point" content="" />
        ${dangerouslySkipEscape(emotionStyleTags)}
      </head>
      <body>
        <div id="root">${dangerouslySkipEscape(pageHtml)}</div>
      </body>
    </html>`
}

async function onBeforeRender(pageContext: PageContext) {
  const store = makeStore()
  const { Page } = pageContext

  const emotionCache = createCache({ key: 'mui-style' })

  store.dispatch(contentApi.endpoints.getManifest.initiate())
  await Promise.all(contentApi.util.getRunningOperationPromises())

  const pageHtml = renderToString(
    <PageShell emotionCache={emotionCache} pageContext={pageContext} store={store}>
      <Page />
    </PageShell>
  )

  // eslint-disable-next-line @typescript-eslint/unbound-method
  const { constructStyleTagsFromChunks, extractCriticalToChunks } =
    createEmotionServer(emotionCache)
  const chunks = extractCriticalToChunks(pageHtml)
  const emotionStyleTags = constructStyleTagsFromChunks(chunks)

  // Grab the initial state from store
  const PRELOADED_STATE = store.getState()

  return {
    pageContext: {
      pageHtml,
      PRELOADED_STATE,
      emotionStyleTags,
    },
  }
}

const passToClient = ['PRELOADED_STATE', 'pageProps']

type ServerPageContext = PageContextBuiltIn &
  PageContext & {
    /** Styles generated by Emotion. */
    emotionStyleTags: string
    /** Rendered page HTML. */
    pageHtml: string
  }

export { onBeforeRender, passToClient, render }
