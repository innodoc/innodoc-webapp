image: docker:latest

stages:
  - build
  - test
  - release
  - deploy

variables:
  IMAGE_STAGING_TAG: $CI_REGISTRY_IMAGE/staging:latest
  IMAGE_RELEASE_TAG: $CI_REGISTRY_IMAGE:latest

.docker-default-vars: &docker-default-vars
  GIT_STRATEGY: none
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE/staging:$CI_COMMIT_REF_SLUG
  IMAGE_E2E_CACHE_TAG: $CI_REGISTRY_IMAGE/e2e:cache
  IMAGE_E2E_TAG: $CI_REGISTRY_IMAGE/e2e:$CI_COMMIT_REF_SLUG

.docker-base: &docker-base
  services:
    - docker:dind
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"
  variables:
    <<: *docker-default-vars

build image:
  <<: *docker-base
  stage: build
  script:
    - docker pull "$IMAGE_TAG" || true
    - docker pull "$IMAGE_STAGING_TAG" || true
    - docker pull "$IMAGE_RELEASE_TAG" || true
    - docker build --pull --cache-from "$IMAGE_TAG" --cache-from "$IMAGE_STAGING_TAG" --cache-from "$IMAGE_RELEASE_TAG" --tag "$IMAGE_TAG" .
    - docker push "$IMAGE_TAG"
  variables:
    <<: *docker-default-vars
    GIT_STRATEGY: fetch
    GIT_SUBMODULE_STRATEGY: recursive

linting:
  <<: *docker-base
  stage: test
  script:
    - docker pull "$IMAGE_TAG"
    - docker run "$IMAGE_TAG" npm run lint

unit tests:
  <<: *docker-base
  stage: test
  script:
    - docker pull "$IMAGE_TAG"
    - docker run "$IMAGE_TAG" npm run test:unit:coverage
  coverage: '/^All files\s+\|\s+([0-9.]+)\s+\|\s+/'

e2e tests:
  <<: *docker-base
  stage: test
  script:
    - docker pull "$IMAGE_TAG"
    - docker pull "$IMAGE_E2E_CACHE_TAG" || true
    - docker build --pull --cache-from "$IMAGE_TAG" --cache-from "$IMAGE_E2E_CACHE_TAG" --tag "$IMAGE_E2E_TAG" --build-arg BUILD_IMAGE="$IMAGE_TAG" -f Dockerfile.e2e .
    - docker tag "$IMAGE_E2E_TAG" "$IMAGE_E2E_CACHE_TAG"
    - docker push "$IMAGE_E2E_CACHE_TAG"
    - docker run "$IMAGE_E2E_TAG"
  variables:
    <<: *docker-default-vars
    GIT_STRATEGY: fetch
    GIT_SUBMODULE_STRATEGY: none

release staging:
  <<: *docker-base
  stage: release
  script:
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$IMAGE_STAGING_TAG"
    - docker push "$IMAGE_STAGING_TAG"
  only:
    - dev

release production:
  <<: *docker-base
  stage: release
  script:
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$IMAGE_RELEASE_TAG"
    - docker push "$IMAGE_RELEASE_TAG"
    - [[ "$CI_COMMIT_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] && docker push "$CI_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker logout
    - echo "$DOCKER_HUB_PWD" | docker login --username "$DOCKER_HUB_USER" --token --password-stdin "$DOCKER_HUB_REGISTRY"
    - docker tag "$IMAGE_TAG" "$DOCKER_HUB_REGISTRY_IMAGE"
    - docker push "$DOCKER_HUB_REGISTRY_IMAGE"
    - [[ "$CI_COMMIT_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] && docker push "$DOCKER_HUB_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
  only:
    - master

deploy staging:
  stage: deploy
  image: alpine
  environment: staging
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$STAGING_PRIVKEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "$STAGING_SERVER_PUBKEY" > ~/.ssh/known_hosts
  script:
    - ssh -o PasswordAuthentication=no -o PreferredAuthentications=publickey -i ~/.ssh/id_rsa "$STAGING_SERVER_USER"@"$STAGING_SERVER" "$STAGING_DEPLOY_CMD"
  only:
    - dev
