image: docker:latest

stages:
  - build
  - test
  - release
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        IMAGE_PUSH_TAG: $CI_REGISTRY_IMAGE/staging:latest
        RELEASE: staging
        SUBDOMAIN_APPEND: -staging
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        IMAGE_PUSH_TAG: $CI_REGISTRY_IMAGE:latest
        RELEASE: production
        SUBDOMAIN_APPEND: ''

.docker-default-vars: &docker-default-vars
  DOCKER_TLS_CERTDIR: '/certs'
  GIT_STRATEGY: none
  IMAGE_TAG: $CI_REGISTRY_IMAGE/staging:$CI_COMMIT_REF_SLUG
  # taken from https://github.com/semver/semver/issues/232#issue-48635632
  SEMVER_REGEXP: '^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$'

.docker-base-login-script: &docker-base-login-script docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
.docker-base-logout-script: &docker-base-logout-script docker logout "$CI_REGISTRY"
.docker-base: &docker-base
  services:
    - docker:20.10.17-dind
  before_script:
    - *docker-base-login-script
  after_script:
    - *docker-base-logout-script
  variables:
    <<: *docker-default-vars

.docker-mongo-base-after-script: &docker-mongo-base-after-script |
  docker stop mongodb-in-memory
  docker network rm testbridge

.docker-mongo-base: &docker-mongo-base
  <<: *docker-base
  before_script:
    - *docker-base-login-script
    - docker network create testbridge
    - docker run
      --rm
      --name mongodb-in-memory
      --network testbridge
      -d mongo:bionic
      --noauth
      --storageEngine ephemeralForTest
  after_script:
    - *docker-mongo-base-after-script
    - *docker-base-logout-script

Build image:
  <<: *docker-base
  stage: build
  script:
    - docker build
      --pull
      --tag "$IMAGE_TAG"
      --build-arg BUILD_ID="$CI_COMMIT_SHA"
      --file docker/Dockerfile
      .
    - docker create
      --cidfile /tmp/build.cid
      "$IMAGE_TAG"
    - docker cp
      $(cat /tmp/build.cid):/home/innodocuser/innodoc-webapp/.yarn/cache/.
      .yarn/cache
    - docker rm -v $(cat /tmp/build.cid)
    - docker push "$IMAGE_TAG"
  variables:
    <<: *docker-default-vars
    GIT_STRATEGY: fetch
  cache:
    key: yarn-cache
    paths:
      - .yarn/cache/

Linting:
  <<: *docker-base
  stage: test
  script:
    - docker run --rm "$IMAGE_TAG" yarn lint

Unit tests:
  <<: *docker-mongo-base
  stage: test
  script:
    - docker run
      --rm
      --env MONGO_URL=mongodb://mongodb-in-memory/innodoc-test
      --env INNODOC_WEBAPP_CI=true
      --network testbridge
      "$IMAGE_TAG"
      yarn test:unit:coverage --color --coverageDirectory=/tmp/coverage
  coverage: '/^All files\s+\|\s+([0-9.]+)\s+\|\s+/'

E2E tests:
  <<: *docker-mongo-base
  stage: test
  script:
    - docker build
      --pull
      --tag innodoc-webapp-e2e:latest
      --build-arg BUILD_IMAGE="$IMAGE_TAG"
      --file docker/Dockerfile.e2e
      .
    - docker run
      --cidfile /tmp/e2e.cid
      --env MONGO_URL=mongodb://mongodb-in-memory/innodoc-e2e
      --network testbridge
      --ipc=host
      --security-opt seccomp=$(pwd)/docker/seccomp_profile.json
      innodoc-webapp-e2e:latest
  after_script:
    - docker cp
      $(cat /tmp/e2e.cid):/home/innodocuser/innodoc-webapp/packages/client-web/e2e/screenshots/.
      packages/client-web/e2e/screenshots
    - docker rm -v $(cat /tmp/e2e.cid)
    - *docker-mongo-base-after-script
    - *docker-base-logout-script
  variables:
    <<: *docker-default-vars
    GIT_STRATEGY: fetch
  artifacts:
    name: e2e-screenshots-$CI_COMMIT_REF_NAME
    paths:
      - packages/client-web/e2e/screenshots/*.png
    when: on_failure
    expire_in: 1 week

Push to GitLab registry:
  <<: *docker-base
  stage: release
  script:
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$IMAGE_PUSH_TAG"
    - docker push "$IMAGE_PUSH_TAG"
  rules:
    - if: $RELEASE == "production" || $RELEASE == "staging"

Push to Docker Hub:
  <<: *docker-base
  stage: release
  script:
    - if echo "$CI_COMMIT_TAG" | grep -qvE "$SEMVER_REGEXP"; then echo "Not a semver tag. Happily skipping..."; exit 0; fi
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$CI_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker push "$CI_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - echo "$DOCKER_HUB_PWD" | docker login --username "$DOCKER_HUB_USER" --password-stdin "$DOCKER_HUB_REGISTRY"
    - docker tag "$IMAGE_TAG" "$DOCKER_HUB_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker push "$DOCKER_HUB_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker tag "$IMAGE_TAG" "$DOCKER_HUB_REGISTRY_IMAGE"
    - docker push "$DOCKER_HUB_REGISTRY_IMAGE"
    - docker logout "$DOCKER_HUB_REGISTRY"
  only:
    - tags

.docker-deploy-base: &docker-deploy-base
  stage: deploy
  image: alpine
  variables:
    GIT_STRATEGY: none
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - echo "$DEPLOY_HOST_KEY" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  rules:
    - if: $RELEASE == "production" || $RELEASE == "staging"

Deploy (vorkurs-mathematik):
  <<: *docker-deploy-base
  environment:
    name: vorkurs-mathematik-$RELEASE
    url: https://vorkurs-mathematik$SUBDOMAIN_APPEND.innocampus.tu-berlin.de/
  script:
    - ssh
      -o PasswordAuthentication=no
      -o PreferredAuthentications=publickey
      "$DEPLOY_DESTINATION"
      webapp-vorkurs-mathematik-$RELEASE

Deploy (m4r):
  <<: *docker-deploy-base
  environment:
    name: m4r-$RELEASE
    url: https://m4r$SUBDOMAIN_APPEND.innocampus.tu-berlin.de/
  script:
    - ssh
      -o PasswordAuthentication=no
      -o PreferredAuthentications=publickey
      "$DEPLOY_DESTINATION"
      webapp-m4r-$RELEASE

Deploy (innodoc):
  <<: *docker-deploy-base
  environment:
    name: innodoc-$RELEASE
    url: https://innodoc$SUBDOMAIN_APPEND.innocampus.tu-berlin.de/
  script:
    - ssh
      -o PasswordAuthentication=no
      -o PreferredAuthentications=publickey
      "$DEPLOY_DESTINATION"
      webapp-innodoc-$RELEASE
