image: docker:latest

stages:
  - build
  - test
  - release
  - deploy

variables:
  IMAGE_STAGING_TAG: $CI_REGISTRY_IMAGE/staging:latest
  IMAGE_RELEASE_TAG: $CI_REGISTRY_IMAGE:latest

.docker-default-vars: &docker-default-vars
  DOCKER_TLS_CERTDIR: '/certs'
  GIT_STRATEGY: none
  IMAGE_E2E_CACHE_TAG: $CI_REGISTRY_IMAGE/e2e:cache
  IMAGE_E2E_TAG: $CI_REGISTRY_IMAGE/e2e:$CI_COMMIT_REF_SLUG
  IMAGE_TAG: $CI_REGISTRY_IMAGE/staging:$CI_COMMIT_REF_SLUG
  # taken from https://github.com/semver/semver/issues/232#issue-48635632
  SEMVER_REGEXP: '^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$'

.docker-base-login-script: &docker-base-login-script echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"
.docker-base-logout-script: &docker-base-logout-script docker logout "$CI_REGISTRY"

.docker-base: &docker-base
  services:
    - docker:19.03.12-dind
  before_script:
    - *docker-base-login-script
  after_script:
    - *docker-base-logout-script
  variables:
    <<: *docker-default-vars

.docker-mongo-base: &docker-mongo-base
  <<: *docker-base
  before_script:
    - *docker-base-login-script
    - docker network create testbridge
    - docker run
      --rm
      --name mongodb-in-memory
      --network testbridge
      -d mongo:bionic
      --noauth
      --storageEngine ephemeralForTest
  after_script:
    - docker stop mongodb-in-memory
    - docker network rm testbridge
    - *docker-base-logout-script

Build image:
  <<: *docker-base
  stage: build
  script:
    - docker pull "$IMAGE_TAG" || true
    - docker pull "$IMAGE_STAGING_TAG" || true
    - docker pull "$IMAGE_RELEASE_TAG" || true
    - docker build
      --pull
      --cache-from "$IMAGE_TAG"
      --cache-from "$IMAGE_STAGING_TAG"
      --cache-from "$IMAGE_RELEASE_TAG"
      --tag "$IMAGE_TAG"
      --build-arg BUILD_ID="$CI_COMMIT_SHA"
      .
    - docker push "$IMAGE_TAG"
  variables:
    <<: *docker-default-vars
    GIT_STRATEGY: fetch
  cache:
    key: yarn-cache
    paths:
      - .yarn/cache

Linting:
  <<: *docker-base
  stage: test
  script:
    - docker pull "$IMAGE_TAG"
    - docker run --rm "$IMAGE_TAG" yarn lint

Unit tests:
  <<: *docker-mongo-base
  stage: test
  script:
    - docker pull "$IMAGE_TAG"
    - docker run
      --rm
      --env MONGO_URL=mongodb://mongodb-in-memory/innodoc-test
      --env INNODOC_WEBAPP_CI=true
      --network testbridge
      "$IMAGE_TAG"
      yarn test:unit:coverage --color --coverageDirectory=/tmp/coverage
  coverage: '/^All files\s+\|\s+([0-9.]+)\s+\|\s+/'

# TODO
# playwright
# screenshots as artefacts?
# cache .yarn/cache + .yarn/pw-browsers (with docker volume)?
# docker build --tag innodoc-webapp-e2e --build-arg BUILD_ID="innodoc-webapp-e2e" -f Dockerfile.e2e .
# docker run --rm --env MONGO_URL=mongodb://mongodb-in-memory/innodoc-e2e --network testbridge --ipc=host --security-opt seccomp=$(pwd)/packages/client-web/e2e/seccomp_profile.json innodoc-webapp-e2e:latest
E2E tests:
  <<: *docker-mongo-base
  stage: test
  script:
    - docker pull "$IMAGE_TAG"
    - docker pull "$IMAGE_E2E_CACHE_TAG" || true
    - docker build
      --pull
      --cache-from "$IMAGE_TAG"
      --cache-from "$IMAGE_E2E_CACHE_TAG"
      --tag "$IMAGE_E2E_TAG"
      --build-arg BUILD_IMAGE="$IMAGE_TAG"
      -f packages/client-web/e2e/Dockerfile
      .
    - docker tag "$IMAGE_E2E_TAG" "$IMAGE_E2E_CACHE_TAG"
    - docker push "$IMAGE_E2E_CACHE_TAG"
    - docker run
      --rm
      --env MONGO_URL=mongodb://mongodb-in-memory/innodoc-e2e
      --network testbridge
      --ipc=host
      --security-opt seccomp=$(pwd)/packages/client-web/e2e/seccomp_profile.json
      "$IMAGE_E2E_TAG"
  variables:
    <<: *docker-default-vars
    GIT_STRATEGY: fetch
  cache:
    key: pw-browsers-cache
    paths:
      - .yarn/pw-browsers
  artifacts:
    name: "e2e-screenshots-$CI_COMMIT_REF_NAME"
    paths:
      - packages/client-web/e2e/screenshots/*.png
    when: on_failure
    expire_in: 1 week

Push to GitLab registry (staging):
  <<: *docker-base
  stage: release
  script:
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$IMAGE_STAGING_TAG"
    - docker push "$IMAGE_STAGING_TAG"
  only:
    - dev

Push to GitLab registry (production):
  <<: *docker-base
  stage: release
  script:
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$IMAGE_RELEASE_TAG"
    - docker push "$IMAGE_RELEASE_TAG"
  only:
    - master

Push to Docker Hub:
  <<: *docker-base
  stage: release
  script:
    - if echo "$CI_COMMIT_TAG" | grep -qvE "$SEMVER_REGEXP"; then echo "Not a semver tag. Happily skipping..."; exit 0; fi
    - docker pull "$IMAGE_TAG"
    - docker tag "$IMAGE_TAG" "$CI_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker push "$CI_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - echo "$DOCKER_HUB_PWD" | docker login --username "$DOCKER_HUB_USER" --password-stdin "$DOCKER_HUB_REGISTRY"
    - docker tag "$IMAGE_TAG" "$DOCKER_HUB_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker push "$DOCKER_HUB_REGISTRY_IMAGE":"${CI_COMMIT_TAG#v}"
    - docker tag "$IMAGE_TAG" "$DOCKER_HUB_REGISTRY_IMAGE"
    - docker push "$DOCKER_HUB_REGISTRY_IMAGE"
    - docker logout "$DOCKER_HUB_REGISTRY"
  only:
    - tags

.deploy-base: &deploy-base
  stage: deploy
  image: alpine
  after_script:
    - rm -f ~/.ssh/id_ecdsa
  variables:
    GIT_STRATEGY: none

.deploy-staging-base: &deploy-staging-base
  <<: *deploy-base
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$STAGING_SSH_KEY" | tr -d '\r' > ~/.ssh/id_ecdsa
    - chmod 600 ~/.ssh/id_ecdsa
    - echo "$STAGING_SERVER_KEY" > ~/.ssh/known_hosts
  only:
    - dev

.deploy-production-base: &deploy-production-base
  <<: *deploy-base
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$PRODUCTION_SSH_KEY" | tr -d '\r' > ~/.ssh/id_ecdsa
    - chmod 600 ~/.ssh/id_ecdsa
    - echo "$PRODUCTION_SERVER_KEY" > ~/.ssh/known_hosts
  only:
    - master

Deploy innodoc (staging):
  <<: *deploy-staging-base
  environment:
    name: innodoc-staging
    url: https://innodoc-staging.innocampus.tu-berlin.de/
  script:
    - ssh
      -o PasswordAuthentication=no
      -o PreferredAuthentications=publickey
      -i ~/.ssh/id_ecdsa
      $STAGING_DESTINATION
      webapp-innodoc-staging

Deploy innodoc (production):
  <<: *deploy-production-base
  environment:
    name: innodoc-production
    url: https://innodoc.innocampus.tu-berlin.de/
  script:
    - ssh
      -o PasswordAuthentication=no
      -o PreferredAuthentications=publickey
      -i ~/.ssh/id_ecdsa
      $PRODUCTION_DESTINATION
      webapp-innodoc-production

Deploy m4r (staging):
  <<: *deploy-staging-base
  environment:
    name: m4r-staging
    url: https://m4r-staging.innocampus.tu-berlin.de/
  script:
    - ssh
      -o PasswordAuthentication=no
      -o PreferredAuthentications=publickey
      -i ~/.ssh/id_ecdsa
      $STAGING_DESTINATION
      webapp-m4r-staging

Deploy m4r (production):
  <<: *deploy-production-base
  environment:
    name: m4r-production
    url: https://m4r.innocampus.tu-berlin.de/
  script:
    - ssh
      -o PasswordAuthentication=no
      -o PreferredAuthentications=publickey
      -i ~/.ssh/id_ecdsa
      $PRODUCTION_DESTINATION
      webapp-m4r-production

Deploy vorkurs-mathematik (staging):
  <<: *deploy-staging-base
  environment:
    name: vorkurs-mathematik-staging
    url: https://vorkurs-mathematik-staging.innocampus.tu-berlin.de/
  script:
    - ssh
      -o PasswordAuthentication=no
      -o PreferredAuthentications=publickey
      -i ~/.ssh/id_ecdsa
      $STAGING_DESTINATION
      webapp-vorkurs-mathematik-staging

Deploy vorkurs-mathematik (production):
  <<: *deploy-production-base
  environment:
    name: vorkurs-mathematik-production
    url: https://vorkurs-mathematik.innocampus.tu-berlin.de/
  script:
    - ssh
      -o PasswordAuthentication=no
      -o PreferredAuthentications=publickey
      -i ~/.ssh/id_ecdsa
      $PRODUCTION_DESTINATION
      webapp-vorkurs-mathematik-production
